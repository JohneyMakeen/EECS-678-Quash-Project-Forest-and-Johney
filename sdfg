else{  // if we haven't found the argument yet, we're going to assume it's a linux command
            // printf("invalid argument: %s\n", argv[arg_num]);
            // it might be a linux system function, so we need to prepare it
            output[0] = '\0'; // if we're changing it, we're starting with a new output
            if (input[0]=='\0'){
                  // if having no unique input
                    int redirect_input = 0;  // just something to see if we use stdin or not
                    int saved_stdin = -1;
                    for (;argv[arg_num] != NULL ; arg_num++){ // while there isn't a stopping symbol
                        if (strcmp(argv[arg_num],"|" ) == 0 || 
                            strcmp(argv[arg_num],">" ) == 0 || 
                            strcmp(argv[arg_num],"#") == 0 || 
                            strcmp(argv[arg_num],">>" ) == 0){
                            arg_num--; // just to ensure we don't go past this later
                            break; // if there's any strings that break the regular flow of the function
                        }
                        if (strcmp(argv[arg_num],"<") == 0){  // if we're needing to take input from a file
                            arg_num++; // stop looking at the <
                            int fd = open(argv[arg_num], O_RDONLY);
                            if (fd < 0) {
                                perror("Cannot open input file");
                                break;
                            }
                            saved_stdin = dup(STDIN_FILENO);
                            dup2(fd, STDIN_FILENO);
                            close(fd);
                            redirect_input = 1;
                        }else{
                            if (output[0] == '\0'){  // if output is empty
                                strcpy(output, argv[arg_num]);  // just set it equal to the argument
                            }
                            else{
                                strncat(output, " ", strlen(" "));
                                strncat(output, argv[arg_num], strlen(argv[arg_num])); // concatinate the two together
                        }}
                    }
                    arg_num++;
                    output = run_command(output);
        


                    if(redirect_input){
                        dup2(saved_stdin, STDIN_FILENO);
                        close(saved_stdin);
                    }

                }else{  // if we have outside input from a pipe
                if (output[0] == '\0'){
                    strcpy(output, argv[arg_num]); // make it so the output has the linux command
                }
                strncat(output, " ", 1);
                strncat(output, input, strlen(input));
                output = run_command(output);
                input[0] = '\0'; // now we need to clear the input
                arg_num++;
                }
            
            // now to call have our output put into the linux system calls
        }

            // snprintf(output, sizeof(output), "Invalid argument \"%s\"",argv[arg_num]);  // we make the output this string
    }
