else if (strcmp(argv[arg_num], "echo") == 0){
            arg_num++; // make is so we're looking at the arguments
            output[0] = '\0';
            char piece[512]; // if we're echoing, we're starting with a new output
            if (input[0] == '\0'){ // if we're not using outside input
                if(strcmp(argv[arg_num],"<") == 0){  // if we're needing to take a file as input
                    arg_num++; // no longer looking at "<"
                    expand_env_token(read_file(argv[arg_num]), piece, sizeof(piece));
                    if (output[0] != '\0'){
                        strncat(output, " ", 255 - strlen(output));
                    }
                    strncat(output, piece, 255 - strlen(output));
                    arg_num++; // just to make up for the lack of loop
                    // printf("from echo: %s\n", output);
                    continue;

                }else{
                for (;argv[arg_num] != NULL ; arg_num++){ // while there isn't a stop
                    if (strcmp(argv[arg_num],"|" ) == 0 || 
                        strcmp(argv[arg_num],">" ) == 0 || 
                        strcmp(argv[arg_num],"#") == 0 || 
                        strcmp(argv[arg_num],">>" ) == 0){
                        break; // if there's any strings that break the regular flow of echo
                        }
                    expand_env_token(argv[arg_num], piece, sizeof(piece));
                    if (output[0] != '\0'){
                        strncat(output, " ", 255 - strlen(output));
                    }
                    strncat(output, piece, 255 - strlen(output));
                }
                // printf("from echo: %s\n", output);
                continue;
            }
            }
            else{  // if we have outside input
                    expand_env_token(input, piece, sizeof(piece));
                    if (output[0] != '\0'){
                        strncat(output, " ", 255 - strlen(output));
                    }
                    strncat(output, piece, 255 - strlen(output));
                    input[0] = '\0';
                    continue;
                }
        }
